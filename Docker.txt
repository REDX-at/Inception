Docker is a containerization platform that allows you to package applications and their dependencies into isolated containers.

🚀 Key Points About Docker:
✅ Lightweight → Containers share the same OS kernel, making them faster than VMs.
✅ Portable → Runs the same way on any system (Linux, Windows, Mac).
✅ Isolated → Each container has its own environment, preventing conflicts.
✅ Scalable → Easily spin up multiple containers for microservices.

🔥 How Docker Works?
Dockerfile → Defines how to build a container.
Docker Image → A snapshot of the app with all dependencies.
Docker Container → A running instance of an image.
Docker Compose → Manages multiple containers in a project.
🎯 Why Use Docker?
Consistency → No “it works on my machine” issues.
Efficiency → Uses fewer resources than traditional VMs.
Automation → Easily deploy apps with simple commands.
For your Inception project, Docker helps you:
✅ Run NGINX, WordPress, and MariaDB in separate containers.
✅ Keep each service isolated but connected via a Docker network.
✅ Ensure a stable and reproducible infrastructure.

Would you like a diagram to visualize how Docker works? 🚢


Map : 
inception/
│── srcs/
│   ├── nginx/
│   │   ├── Dockerfile
│   │   ├── conf.d/ (nginx configuration files)
│   ├── wordpress/
│   │   ├── Dockerfile
│   │   ├── wp-config.php
│   ├── mariadb/
│   │   ├── Dockerfile
│   │   ├── my.cnf (optional configuration)
│── docker-compose.yml
│── Makefile


Map Nginx: 
nginx/
│── Dockerfile
│── conf.d/
│   └── default.conf  <-- Your NGINX config file
│── ssl/
│   ├── nginx-selfsigned.crt
│   └── nginx-selfsigned.key


Explain the Cmd = openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt -subj "/C=US/ST=State/L=City/O=Company/OU=Org/CN=localhost" : 
openssl req
openssl is the command-line tool for OpenSSL, a toolkit for cryptographic operations like generating certificates and keys.
req tells OpenSSL you're creating a certificate request or a self-signed certificate (in this case).
Flags and Arguments
-x509

Generates a self-signed X.509 certificate.
X.509 is the standard format for SSL/TLS certificates.
If you omit this, OpenSSL would create a certificate request (CSR) instead of the certificate itself.
-nodes

Stands for "no DES" (Data Encryption Standard).
Prevents the private key from being encrypted.
If you don’t use this, the private key would be encrypted, requiring a password to use it (which isn't practical for a web server).
-days 365

Sets the validity period of the certificate.
In this case, the certificate will be valid for 365 days (1 year).
-newkey rsa:2048

Generates a new RSA key pair with 2048 bits.
RSA is an asymmetric encryption algorithm. The private key will be used to decrypt data, while the public key is distributed to the clients for encryption.
2048 bits is a recommended size for key strength (secure enough for most uses).
-keyout /etc/ssl/private/nginx-selfsigned.key

Specifies where to save the private key generated by OpenSSL.
The private key is used to decrypt encrypted data that comes from clients.
Path: /etc/ssl/private/nginx-selfsigned.key (NGINX uses this to authenticate the server).
-out /etc/ssl/certs/nginx-selfsigned.crt

Specifies where to save the certificate file that will be given to clients (public part of the key pair).
Path: /etc/ssl/certs/nginx-selfsigned.crt.
-subj "/C=US/ST=State/L=City/O=Company/OU=Org/CN=localhost"

This specifies the subject of the certificate, which provides metadata about the certificate, such as:
C: Country (e.g., US for the United States).
ST: State.
L: Locality (city).
O: Organization name.n or hostname this certificate will protect, like localhost).

rebuild docker
docker-compose down
docker-compose build --no-cache
docker-compose up

OU: Organizational unit (department).
CN: Common Name (usually the domai